// MD3 Ultimate Design System - The Living, Breathing Interface
// =============================================================
// A harmonious, dynamic, and context-aware design system

@use 'sass:map';
@use 'sass:math';
@use 'sass:color';
@use 'sass:list';
@use 'sass:string';

// ============================================
// 1. HARMONIC SPACING & RHYTHM SYSTEM
// ============================================

// The Golden Ratio and Musical Intervals
$golden-ratio: 1.618;
$perfect-fifth: 1.5;
$perfect-fourth: 1.333;
$major-third: 1.25;
$minor-third: 1.2;

// Base unit - all spacing derives from this
$base-unit: 4px;

// Harmonic spacing scale based on musical intervals
$spacing-scale: (
  0: 0,
  // Silence
  xxs: $base-unit,
  // 4px - Pianissimo
  xs: $base-unit * 2,
  // 8px - Piano
  sm: $base-unit * 3,
  // 12px - Mezzo-piano
  md: $base-unit * 4,
  // 16px - Mezzo-forte
  lg: $base-unit * 6,
  // 24px - Forte
  xl: $base-unit * 8,
  // 32px - Fortissimo
  xxl: $base-unit * 12,
  // 48px - Sforzando
  xxxl: $base-unit * 16,
  // 64px - Crescendo
  xxxxl: $base-unit * 24, // 96px - Climax
);

// Fibonacci-based spacing for more organic layouts
$fibonacci-scale: (
  0: 0,
  1: 1px,
  2: 2px,
  3: 3px,
  5: 5px,
  8: 8px,
  13: 13px,
  21: 21px,
  34: 34px,
  55: 55px,
  89: 89px,
  144: 144px,
);

// Spacing function - enforces rhythm
@function space($size: md) {
  @if map.has-key($spacing-scale, $size) {
    @return map.get($spacing-scale, $size);
  }
  @warn "Unknown spacing size '#{$size}'. Using 'md' as fallback.";
  @return map.get($spacing-scale, md);
}

// Fibonacci spacing function
@function fib($level: 8) {
  @if map.has-key($fibonacci-scale, $level) {
    @return map.get($fibonacci-scale, $level);
  }
  @return #{$level}px;
}

// Fluid spacing that responds to viewport
@function fluid-space($min-size: sm, $max-size: lg, $min-vw: 320px, $max-vw: 1440px) {
  $min: map.get($spacing-scale, $min-size);
  $max: map.get($spacing-scale, $max-size);
  $diff: math.div($max - $min, $max-vw - $min-vw);

  @return clamp(#{$min}, #{$min} + #{$diff} * (100vw - #{$min-vw}), #{$max});
}

// Rhythm mixin for consistent vertical rhythm
@mixin vertical-rhythm($font-size: 1rem, $line-height: 1.5, $margin-top: 0, $margin-bottom: md) {
  font-size: $font-size;
  line-height: $line-height;
  @if $margin-top == 0 {
    margin-top: 0;
  } @else {
    margin-top: space($margin-top);
  }
  @if $margin-bottom == 0 {
    margin-bottom: 0;
  } @else {
    margin-bottom: space($margin-bottom);
  }
}

// Grid rhythm for layout consistency
@mixin grid-rhythm($columns: 12, $gap: md) {
  display: grid;
  grid-template-columns: repeat($columns, 1fr);
  gap: space($gap);

  // Ensure content aligns to baseline grid
  > * {
    align-self: start;
  }
}

// ============================================
// 2. DYNAMIC CSS VARIABLE ENGINE
// ============================================

// Generate CSS variables from a theme map
@mixin emit-css-variables($theme-map, $prefix: 'md-sys') {
  @each $key, $value in $theme-map {
    @if type-of($value) == 'map' {
      @include emit-css-variables($value, '#{$prefix}-#{$key}');
    } @else {
      --#{$prefix}-#{$key}: #{$value};
    }
  }
}

// Dynamic theme engine
@mixin dynamic-theme-engine() {
  // Core color tokens that adapt dynamically
  --theme-primary-hue: 175;
  --theme-primary-saturation: 42%;
  --theme-primary-lightness: 35%;

  // Generate primary color from HSL components
  --md-sys-color-primary: hsl(
    var(--theme-primary-hue),
    var(--theme-primary-saturation),
    var(--theme-primary-lightness)
  );

  // Auto-generate color variations
  --md-sys-color-primary-light: hsl(
    var(--theme-primary-hue),
    calc(var(--theme-primary-saturation) * 0.8),
    calc(var(--theme-primary-lightness) * 1.3)
  );

  --md-sys-color-primary-dark: hsl(
    var(--theme-primary-hue),
    calc(var(--theme-primary-saturation) * 1.1),
    calc(var(--theme-primary-lightness) * 0.7)
  );

  --md-sys-color-primary-container: hsl(
    var(--theme-primary-hue),
    calc(var(--theme-primary-saturation) * 0.3),
    calc(var(--theme-primary-lightness) * 2.5)
  );

  // Dynamic contrast calculation
  --contrast-ratio: 1;
  --md-sys-color-on-primary: hsl(
    var(--theme-primary-hue),
    5%,
    calc(95% - (var(--theme-primary-lightness) * var(--contrast-ratio)))
  );

  // Rhythm-based spacing variables
  @include emit-css-variables($spacing-scale, 'space');

  // Dynamic motion tokens
  --motion-speed: 1;
  --motion-smooth: calc(300ms / var(--motion-speed));
  --motion-quick: calc(150ms / var(--motion-speed));
  --motion-slow: calc(500ms / var(--motion-speed));

  // Adaptive elevation
  --elevation-intensity: 1;
  --shadow-color: hsla(var(--theme-primary-hue), 20%, 10%, calc(0.2 * var(--elevation-intensity)));
}

// ============================================
// 3. MATERIAL YOU - DYNAMIC COLOR EXTRACTION
// ============================================

// Extract dominant color from image (concept - requires JS implementation)
@mixin material-you-palette($source-color) {
  // TonalSpot algorithm simulation
  $hue: hue($source-color);
  $saturation: saturation($source-color);
  $lightness: lightness($source-color);

  // Generate tonal palette
  --tonal-0: hsl($hue, $saturation, 0%);
  --tonal-10: hsl($hue, $saturation * 0.9, 10%);
  --tonal-20: hsl($hue, $saturation * 0.85, 20%);
  --tonal-30: hsl($hue, $saturation * 0.8, 30%);
  --tonal-40: hsl($hue, $saturation * 0.75, 40%);
  --tonal-50: hsl($hue, $saturation, 50%);
  --tonal-60: hsl($hue, $saturation * 0.9, 60%);
  --tonal-70: hsl($hue, $saturation * 0.8, 70%);
  --tonal-80: hsl($hue, $saturation * 0.7, 80%);
  --tonal-90: hsl($hue, $saturation * 0.5, 90%);
  --tonal-95: hsl($hue, $saturation * 0.3, 95%);
  --tonal-99: hsl($hue, $saturation * 0.1, 99%);
  --tonal-100: hsl($hue, $saturation, 100%);

  // Map to MD3 color roles
  --md-sys-color-primary: var(--tonal-40);
  --md-sys-color-on-primary: var(--tonal-100);
  --md-sys-color-primary-container: var(--tonal-90);
  --md-sys-color-on-primary-container: var(--tonal-10);

  // Generate complementary colors
  $complement-hue: ($hue + 180) % 360;
  --md-sys-color-secondary: hsl($complement-hue, $saturation * 0.6, 50%);

  // Generate triadic colors
  $triadic-hue: ($hue + 120) % 360;
  --md-sys-color-tertiary: hsl($triadic-hue, $saturation * 0.5, 45%);
}

// ============================================
// 4. CONTEXTUAL & LIVING INTERFACE
// ============================================

// Time-aware theming
@mixin time-aware-theme() {
  // These would be set by JavaScript based on actual time
  --hour: 12; // 0-23
  --daylight: 0.5; // 0-1 (night to day)

  // Adjust theme based on time
  --time-warmth: calc(20 + (var(--hour) - 12) * (var(--hour) - 12) * -0.1);

  // Warmer colors in evening, cooler in morning
  --theme-primary-hue: calc(175 + var(--time-warmth));

  // Brightness follows daylight
  --theme-primary-lightness: calc(30% + (var(--daylight) * 15%));

  // Contrast increases at night for readability
  --contrast-ratio: calc(1 + ((1 - var(--daylight)) * 0.3));
}

// Mood-based themes
@mixin mood-theme($mood: 'balanced') {
  @if $mood == 'focused' {
    // Reduced saturation for focus
    --theme-primary-saturation: 25%;
    --motion-speed: 0.7; // Slower animations
    --elevation-intensity: 0.5; // Softer shadows
  } @else if $mood == 'energetic' {
    // Higher saturation and contrast
    --theme-primary-saturation: 65%;
    --motion-speed: 1.3; // Snappier animations
    --elevation-intensity: 1.5; // Stronger shadows
  } @else if $mood == 'relaxed' {
    // Warmer, softer colors
    --theme-primary-hue: 35;
    --theme-primary-saturation: 35%;
    --motion-speed: 0.8;
    --elevation-intensity: 0.7;
  }
}

// Content-aware color adaptation
@mixin content-aware-theme($content-type: 'default') {
  @if $content-type == 'reading' {
    // High contrast, serif fonts
    --contrast-ratio: 1.5;
    --md-sys-typography-brand-family: 'Merriweather', serif;
    --md-sys-color-surface: #fffef7; // Warm paper
  } @else if $content-type == 'media' {
    // Dark theme for media viewing
    --md-sys-color-surface: #121212;
    --md-sys-color-on-surface: #e0e0e0;
    --elevation-intensity: 2; // Deep shadows
  } @else if $content-type == 'data' {
    // Clean, technical appearance
    --md-sys-typography-brand-family: 'Roboto Mono', monospace;
    --theme-primary-saturation: 15%;
    --contrast-ratio: 1.2;
  }
}

// ============================================
// 5. RESPONSIVE RHYTHM SYSTEM
// ============================================

// Modular scale for typography
$modular-scale: (
  -2: math.div(1, $perfect-fourth * $perfect-fourth),
  // 0.563
  -1: math.div(1, $perfect-fourth),
  // 0.75
  0: 1,
  // 1
  1: $perfect-fourth,
  // 1.333
  2: $perfect-fourth * $perfect-fourth,
  // 1.777
  3: $perfect-fourth * $perfect-fourth * $major-third,
  // 2.221
  4: $golden-ratio * $golden-ratio,
  // 2.618
  5: $golden-ratio * $golden-ratio * $major-third // 3.272
);

// Fluid typography with modular scale
@mixin fluid-type($level: 0, $line-height-ratio: $golden-ratio) {
  $min-size: map.get($modular-scale, $level) * 0.875rem;
  $max-size: map.get($modular-scale, $level) * 1.25rem;

  font-size: clamp(#{$min-size}, #{$min-size} + 2vw, #{$max-size});

  line-height: calc(1em * #{$line-height-ratio});

  // Maintain vertical rhythm
  margin-bottom: space(md);
}

// ============================================
// 6. ADAPTIVE COMPONENT BEHAVIORS
// ============================================

// Smart button that adapts to context
@mixin adaptive-button() {
  // Base styles use CSS variables
  padding: calc(var(--space-sm) * var(--density, 1)) calc(var(--space-md) * var(--density, 1));

  border-radius: calc(var(--space-lg) * var(--roundness, 1));

  background: var(--md-sys-color-primary);
  color: var(--md-sys-color-on-primary);

  font-size: calc(1rem * var(--scale, 1));

  transition: all var(--motion-smooth) cubic-bezier(0.2, 0, 0, 1);

  // Adaptive states
  &:hover {
    transform: translateY(calc(-2px * var(--elevation-intensity)));
    box-shadow: 0 calc(4px * var(--elevation-intensity)) calc(8px * var(--elevation-intensity))
      var(--shadow-color);
  }

  &:active {
    transform: translateY(0);
    box-shadow: 0 calc(1px * var(--elevation-intensity)) calc(2px * var(--elevation-intensity))
      var(--shadow-color);
  }

  // Context modifiers
  &[data-context='urgent'] {
    --md-sys-color-primary: #dc2626;
    --motion-speed: 1.5;
    animation: pulse 2s infinite;
  }

  &[data-context='success'] {
    --md-sys-color-primary: #16a34a;
  }

  &[data-context='subtle'] {
    --elevation-intensity: 0.3;
    --contrast-ratio: 0.7;
  }
}

// Responsive card that breathes
@mixin living-card() {
  background: var(--md-sys-color-surface);
  border-radius: calc(var(--space-md) * var(--roundness, 1));
  padding: space(lg);

  // Organic shadow that responds to elevation
  box-shadow:
    0 calc(1px * var(--elevation-intensity)) calc(3px * var(--elevation-intensity))
      var(--shadow-color),
    0 calc(4px * var(--elevation-intensity)) calc(12px * var(--elevation-intensity))
      var(--shadow-color);

  // Breathing animation on hover
  transition: all var(--motion-smooth) cubic-bezier(0.2, 0, 0, 1);

  &:hover {
    transform: translateY(calc(-4px * var(--elevation-intensity)))
      scale(calc(1 + 0.02 * var(--elevation-intensity)));

    box-shadow:
      0 calc(4px * var(--elevation-intensity)) calc(8px * var(--elevation-intensity))
        var(--shadow-color),
      0 calc(12px * var(--elevation-intensity)) calc(24px * var(--elevation-intensity))
        var(--shadow-color);
  }

  // Content-aware spacing
  > * + * {
    margin-top: space(md);
  }

  // Maintain rhythm in nested content
  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    @include fluid-type();
  }

  p {
    @include vertical-rhythm();
  }
}

// ============================================
// 7. GENERATIVE PATTERNS & TEXTURES
// ============================================

// Generate organic gradients
@function organic-gradient($color1, $color2, $angle: 45deg) {
  @return linear-gradient(
    $angle,
    $color1 0%,
    mix($color1, $color2, 75%) 25%,
    mix($color1, $color2, 50%) 50%,
    mix($color1, $color2, 25%) 75%,
    $color2 100%
  );
}

// Noise texture for depth
@mixin noise-texture($opacity: 0.03) {
  &::before {
    content: '';
    position: absolute;
    inset: 0;
    background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 256 256' xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='noise'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='0.65' numOctaves='3' stitchTiles='stitch'/%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23noise)' opacity='#{$opacity}'/%3E%3C/svg%3E");
    pointer-events: none;
    mix-blend-mode: overlay;
  }
}

// Animated mesh gradient
@mixin mesh-gradient() {
  background: linear-gradient(
    45deg,
    var(--md-sys-color-primary) 0%,
    var(--md-sys-color-secondary) 25%,
    var(--md-sys-color-tertiary) 50%,
    var(--md-sys-color-primary) 100%
  );
  background-size: 400% 400%;
  animation: mesh-shift 15s ease infinite;

  @keyframes mesh-shift {
    0%,
    100% {
      background-position: 0% 50%;
    }
    50% {
      background-position: 100% 50%;
    }
  }
}

// ============================================
// 8. PERFORMANCE & OPTIMIZATION
// ============================================

// Smart render optimization
@mixin optimize-rendering() {
  // Enable GPU acceleration
  transform: translateZ(0);
  will-change: transform, opacity;

  // Optimize text rendering
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;

  // Contain layout calculations
  contain: layout style paint;

  // Use CSS containment
  @supports (container-type: inline-size) {
    container-type: inline-size;
  }
}

// Lazy loading animation
@mixin lazy-load-animation() {
  opacity: 0;
  animation: lazy-fade-in var(--motion-smooth) forwards;
  animation-timeline: view();
  animation-range: entry 0% cover 30%;

  @keyframes lazy-fade-in {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
}

// ============================================
// 9. ACCESSIBILITY & INCLUSIVE DESIGN
// ============================================

// Enhanced focus styles that follow rhythm
@mixin rhythmic-focus() {
  &:focus-visible {
    outline: calc(var(--space-xxs) * 0.5) solid var(--md-sys-color-primary);
    outline-offset: var(--space-xxs);
    border-radius: var(--space-xs);

    // Animated focus ring
    box-shadow:
      0 0 0 var(--space-xxs) rgba(var(--md-sys-color-primary-rgb), 0.2),
      0 0 0 var(--space-xs) rgba(var(--md-sys-color-primary-rgb), 0.1);

    animation: focus-pulse 2s infinite;
  }

  @keyframes focus-pulse {
    0%,
    100% {
      box-shadow:
        0 0 0 var(--space-xxs) rgba(var(--md-sys-color-primary-rgb), 0.2),
        0 0 0 var(--space-xs) rgba(var(--md-sys-color-primary-rgb), 0.1);
    }
    50% {
      box-shadow:
        0 0 0 var(--space-xs) rgba(var(--md-sys-color-primary-rgb), 0.3),
        0 0 0 var(--space-sm) rgba(var(--md-sys-color-primary-rgb), 0.15);
    }
  }
}

// Touch target optimization
@mixin touch-target($min-size: 44px) {
  position: relative;

  &::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: max(100%, #{$min-size});
    height: max(100%, #{$min-size});
    pointer-events: none;
  }

  // Visual feedback for touch
  @media (hover: none) {
    &:active {
      transform: scale(0.95);
    }
  }
}

// ============================================
// 10. THE ULTIMATE THEME MIXIN
// ============================================

@mixin ultimate-md3-theme() {
  // Initialize the dynamic theme engine
  @include dynamic-theme-engine();

  // Apply time-aware adjustments
  @include time-aware-theme();

  // Set default mood
  @include mood-theme('balanced');

  // Apply Material You if source color provided
  @if variable-exists(material-you-source) {
    @include material-you-palette($material-you-source);
  }

  // Responsive rhythm system
  html {
    font-size: clamp(14px, 1.5vw, 18px);
  }

  // Apply spacing rhythm globally
  * {
    margin: 0;
    padding: 0;

    // Enforce spacing rhythm
    &[class*='m-'] {
      margin: var(--spacing-rhythm);
    }

    &[class*='p-'] {
      padding: var(--spacing-rhythm);
    }
  }

  // Living, breathing body
  body {
    @include optimize-rendering();
    @include noise-texture(0.02);

    background: var(--md-sys-color-background);
    color: var(--md-sys-color-on-background);

    // Smooth all transitions by default
    * {
      transition: inherit;
    }

    transition:
      background var(--motion-slow) ease,
      color var(--motion-smooth) ease;
  }

  // Apply adaptive behaviors to common elements
  button,
  .button {
    @include adaptive-button();
    @include rhythmic-focus();
    @include touch-target();
  }

  .card {
    @include living-card();
    @include lazy-load-animation();
  }

  // Typography with rhythm
  h1 {
    @include fluid-type(4);
  }
  h2 {
    @include fluid-type(3);
  }
  h3 {
    @include fluid-type(2);
  }
  h4 {
    @include fluid-type(1);
  }
  h5,
  h6 {
    @include fluid-type(0);
  }
  p {
    @include fluid-type(-1);
  }
  small {
    @include fluid-type(-2);
  }

  // Grid system with rhythm
  .container {
    @include grid-rhythm();
    max-width: calc(1440px - var(--space-xl) * 2);
    margin: 0 auto;
    padding: 0 var(--space-xl);
  }

  // Responsive utilities using rhythm
  @each $size, $value in $spacing-scale {
    .m-#{$size} {
      margin: #{$value};
    }
    .mt-#{$size} {
      margin-top: #{$value};
    }
    .mr-#{$size} {
      margin-right: #{$value};
    }
    .mb-#{$size} {
      margin-bottom: #{$value};
    }
    .ml-#{$size} {
      margin-left: #{$value};
    }
    .mx-#{$size} {
      margin-left: #{$value};
      margin-right: #{$value};
    }
    .my-#{$size} {
      margin-top: #{$value};
      margin-bottom: #{$value};
    }

    .p-#{$size} {
      padding: #{$value};
    }
    .pt-#{$size} {
      padding-top: #{$value};
    }
    .pr-#{$size} {
      padding-right: #{$value};
    }
    .pb-#{$size} {
      padding-bottom: #{$value};
    }
    .pl-#{$size} {
      padding-left: #{$value};
    }
    .px-#{$size} {
      padding-left: #{$value};
      padding-right: #{$value};
    }
    .py-#{$size} {
      padding-top: #{$value};
      padding-bottom: #{$value};
    }
  }
}

// ============================================
// EXPORT THE ULTIMATE THEME
// ============================================

// Apply everything when imported
:root {
  @include ultimate-md3-theme();
}
