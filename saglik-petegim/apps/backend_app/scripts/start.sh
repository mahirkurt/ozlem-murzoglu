#!/bin/bash

# Start script for development environment

set -e

echo "üöÄ Starting Saƒülƒ±k Peteƒüim Backend Development Environment"

# Check if .env file exists
if [ ! -f ".env" ]; then
    echo "üìã Creating .env file from .env.example..."
    cp .env.example .env
    echo "‚ö†Ô∏è  Please edit .env file with your configuration before continuing."
    exit 1
fi

# Install dependencies if needed
if [ ! -d ".venv" ] && [ ! -d "node_modules" ]; then
    echo "üì¶ Installing Python dependencies..."
    if command -v poetry &> /dev/null; then
        poetry install
    else
        pip install -r requirements.txt
    fi
fi

echo "üê≥ Starting Docker services..."
docker-compose up --build -d

echo "‚è≥ Waiting for services to be ready..."
sleep 10

echo "üóÑÔ∏è  Running database migrations..."
if command -v poetry &> /dev/null; then
    poetry run alembic upgrade head
else
    alembic upgrade head
fi

echo "üå± Seeding initial data..."
if command -v poetry &> /dev/null; then
    poetry run python -m app.scripts.seed_data
else
    python -m app.scripts.seed_data
fi

echo "‚úÖ Development environment is ready!"
echo ""
echo "üìç Available endpoints:"
echo "   ‚Ä¢ API Documentation: http://localhost:8000/docs"
echo "   ‚Ä¢ API Redoc: http://localhost:8000/redoc"
echo "   ‚Ä¢ Health Check: http://localhost:8000/health"
echo "   ‚Ä¢ Flower (Celery): http://localhost:5555"
echo "   ‚Ä¢ MailHog: http://localhost:8025"
echo "   ‚Ä¢ PgAdmin: http://localhost:5050"
echo "   ‚Ä¢ MinIO Console: http://localhost:9001"
echo ""
echo "üîß Management commands:"
echo "   ‚Ä¢ View logs: docker-compose logs -f api"
echo "   ‚Ä¢ Stop services: docker-compose down"
echo "   ‚Ä¢ Restart API: docker-compose restart api"
echo ""
echo "Happy coding! üéâ"